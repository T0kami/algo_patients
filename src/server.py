import http.server
import socketserver
from urllib.parse import urlparse
from urllib.parse import parse_qs

import parsing_all_logs
import sim


class MyHttpRequestHandler(http.server.SimpleHTTPRequestHandler):
    def do_GET(self):
        if self.path != "/favicon.ico":
            # Sending an '200 OK' response
            self.send_response(200)

            # Setting the header
            self.send_header("Content-type", "text/html")

            # Whenever using 'send_header', you also have to call 'end_headers'
            self.end_headers()

            # Extract query param
            name = "default"
            rate = 0.07
            iterations = 100
            try:
                query_components = parse_qs(urlparse(self.path).query)
                if 'name' in query_components:
                    name = query_components["name"][0]
                if 'rate' in query_components:
                    rate = float(query_components["rate"][0])
                if 'iterations' in query_components:
                    iterations = int(query_components["iterations"][0])
                if rate < 0 or rate > 1:
                    html = f"<html><head></head><body><h1>Rate must be between 0 and 1</h1></body></html>"
                elif iterations < 0 or iterations > 1000:
                    html = f"<html><head></head><body><h1>Iterations must be between 0 and 1000</h1></body></html>"
                else:
                    chat=parsing_all_logs.parseur()
                    name_list = [name]
                    # name_list = fill_list(chat)
                    sim.compute(chat, name_list, rate, iterations)
                    # html = f"<html><head></head><body><h1>Results for {name} with a rate of {rate} on {iterations} iterations</h1></body></html>"
                    html = f"<html><head></head><body><h1>ERROR</h1></body></html>"
                    with open("../data/graphs/" + name + ".html", "r") as file:
                        html = file.read()
                # Writing the HTML contents with UTF-8
            except:
                html = f"<html><head></head><body><h1>ERROR</h1></body></html>"

            # Some custom HTML code, possibly generated by another function

            self.wfile.write(bytes(html, "utf8"))

            return


# Create an object of the above class
handler_object = MyHttpRequestHandler

PORT = 8000
my_server = socketserver.TCPServer(("", PORT), handler_object)

# Start the server
my_server.serve_forever()
